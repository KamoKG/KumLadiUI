app.get("/leaderBoard/:courseCode",function(req,res,next){
	if(req.params.courseCode)
	{
		Users.find({modules:req.params.courseCode},function(err,users){
			if(err)
			{
				return res.status(200).json({text:err});
			}
			else
			{
				async.map(users,function(user,callBack){
					async.parallel({
						userID:function(callBack){
							callBack(null,user.userID);
						},
						bounty:function(callBack){
							csStatusS.findOne({courseCode:req.param.courseCode,userID:user.userID},function(err,votes){
								if(err)
								{
									console.log("Error: "+err);
									return callBack(err,null);
								}
								if(votes)
								{
									return callBack(null,votes.current_bounty);
								}
								callBack(null,0);
							});
						},
						points:function(callBack){
							csStatusS.findOne({userID:user.userID,courseCode:req.params.courseCode},function(err,cs){
								if(err)
								{
									console.log("Error: "+err);
									return callBack(err,null);
								}
								if(cs)
								{
									return callBack(null,cs.current_points);
								}
								else
								{
									console.log(user.name+" does not exist");
									return callBack(null,0);
								}
							});
						},
						total: function(callBack){
							csStatusS.findOne({userID:user.userID,courseCode:req.params.courseCode},function(err,cs){
								if(err)
								{
									console.log("Error: "+err);
									return callBack(err,null);
								}
								if(cs)
								{
									return callBack(null,(cs.current_points*10)+cs.current_bounty);
								}
								else
								{
									console.log(user.name+" does not exist");
									return callBack(null,0);
								}
							});
						}
					},
					function(err,results){
						if(err)
						{
							console.log("Error: "+err);
							callBack(err,null);
						}
						else
						{
							callBack(null,results);
						}
					});
				},
				function(err,results){
					if(err)
					{
						return res.status(200).json({
							text:err
						});
					}
					var tmp;
					for(var i in results)
					{
						for(var j=1;j<(results.length-i);j++)
						{
							if(results[j-1].total>results[j])
							{
								tmp=results[j-1];
								results[j-1]=results[j];
								results[j]=tmp;
							}
						}
					}
					return res.status(200).json({
						data:results
					});
				});
			}
		});
	}
	else
	{
		return res.status(200).json({
			data:"missing parameters"
		});
	}
});